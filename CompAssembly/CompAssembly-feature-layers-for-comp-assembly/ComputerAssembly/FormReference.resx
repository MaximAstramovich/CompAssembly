<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="menuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>   1. Для начала создания сборки необходимо нажать на кнопку "Приступить к работе" в главном меню программы. По нажатию на данную кнопку открывается окно со списком готовых сборок. По нажатию на пункт "Добавить" в меню, открывается окно редактора сборок. Для начала работы необходимо выбрать клиента по нажатию на кнопку "...",  после чего открывается список клиентов. После двойного клика по необходимому клиенту, его ФИО заносится в поле, далее нужно указать номер создаваемой сборки, после чего можно приступить к выбору комплектующих в соответствующих выпадающих списках. По окончанию сборки можно нажать на кнопку "Рассчитать" для отображения полной стоимости сборки. По нажатию на пункт "Сохранить" в меню данные о сборке сохраняются, после чего нужно нажать на кнопку меню "Отмена". Далее при возвращении на окно списка сборок, нужно нажать на пункт меню "Обновить", для отображения созданной сборки в списке сборок. После создания сборки статус выдачи сборки клиенту автоматически выставляется в значение "Не выдано". После выдачи сборки необходимо нажать на выдать "Выдать" в меню, после чего статус выдачи изменяется на "Выдано" и назначается дата оплаты, соответствующая дате выдачи сборки. Для удаления существующей сборки необходимо выбрать сборку из списка и нажать на пункт "Удалить" в меню, и подтвердить удаление.
   2. Чтобы редактировать готовую сборку нужно выбрать необходимую вам сборку в списке готовых сборок и нажать на кнопку "Редактировать", после чего открывается окно редактора сборок. Затем можно приступить кизменению клиента, номера сборки и комплектующих в соответствующих выпадающих списках. По окончанию сборки можно нажать на кнопку "Рассчитать" для отображения полной стоимости сборки. По нажатию на кнопку "Сохранить" в меню, данные о сборке сохраняются, после чего нужно нажать на кнопку меню "Отмена". Далее при возвращении на окно списка сборок, нужно нажать на пункт "Обновить", для отображения изменённой сборки в списке сборок.
   3. Для просмотра и редактирования справочников необходимо выбрать необходимый справочник в меню программы, после чего откроется окно с нужной информацией. Для добавления, удаления и редактирования информации необходимо выбрать соответствующий пункт в меню этого окна. Затем открывается окно редактора, где нужно заполнить или изменить информацию в полях ввода. После добавления информации или внесения изменений нужно нажать на кнопку "Сохранить" в меню. Данные сохраняются. Затем окно редактирования автоматически закрывается, после чего нужно нажать на кнопку в меню "Обновить", чтобы внесённые изменения отображались в справочнике. Для удаления информации необходимо выбрать нужный вам пункт в окне справочника и нажать на кнопку "Удалить" в меню, и подтвердить удаление.
   4. Для поиска информации в справочниках и списке сборок необходимо ввести ключевое слово в поле поиска и нажать соответствующую кнопку.
   5. Для работы с отчётами нужно выбрать необходимый пункт в выпадающем меню "Отчёты" в главном меню программы. После выбора отчета открывается окно с соответствующим отчетом с возможностью его просмотра, экспорта, вывода на печать и копирования.
   6. Для получения информации о программе необходимо нажать на пункт "О программе" в меню.</value>
  </data>
</root>